import 'package:flutter/material.dart';
import 'package:movies_app_ttcn/model/movie_model.dart';
import '../helper/format_date.dart';
import '../view/details_movie/view_details_movie.dart';

// NOW PLAYING
Widget buildMovieGridNowPlaying(Future<AutoGenerated> futureMovies) {
  return Padding(
    padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 20),
    child: FutureBuilder<AutoGenerated>(
      future: futureMovies,
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.waiting) {
          return const Center(
              child: CircularProgressIndicator(
                color: Colors.amber,
              )
          );
        } else if (snapshot.hasError) {
          return Center(
              child: Text('Error: ${snapshot.error}',
                  style: const TextStyle(color: Colors.white)));
        } else if (snapshot.hasData) {
          return GridView.builder(
            gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
              crossAxisCount: 2,
              mainAxisSpacing: 16.0,
              crossAxisSpacing: 16.0,
              childAspectRatio: 0.6,
            ),
            itemCount: snapshot.data!.results!.length,
            itemBuilder: (context, index) {
              Results movie = snapshot.data!.results![index];
              //return buildMovieGridItemNowPlaying(movie);
              return GestureDetector(
                onTap: () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(
                      builder: (context) => DetailMoviePage(movie: movie),
                    ),
                  );
                },
                child: buildMovieGridItemNowPlaying(movie),
              );
            },
          );
        } else {
          return const Center(
              child: Text(
                  'No data available',
                  style: TextStyle(color: Colors.white)
              )
          );
        }
      },
    ),
  );
}

Widget buildMovieGridItemNowPlaying(Results movie) {
  return Column(
    crossAxisAlignment: CrossAxisAlignment.start,
    children: [
      Container(
        width: 191,
        height: 220,
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(12.0),
          image: DecorationImage(
            image: NetworkImage(
                'https://image.tmdb.org/t/p/w500${movie.posterPath}'
            ),
            fit: BoxFit.fill,
          ),
        ),
      ),

      const SizedBox(height: 8),
      Text(
        movie.title!,
        style: const TextStyle(
            color: Color(0xFFFCC434),
            fontSize: 16,
            fontWeight: FontWeight.bold),
        maxLines: 1,
        overflow: TextOverflow.ellipsis,
      ),
      Row(
        children: [
          const Icon(Icons.star, color: Colors.yellow, size: 14),
          const SizedBox(width: 4),
          Text(
            '${movie.voteAverage}',
            style: const TextStyle(color: Colors.white, fontSize: 12),
          ),
          const SizedBox(width: 5,),
          Text(
            '(${movie.voteCount})',
            style: const TextStyle(color: Colors.white, fontSize: 12),
          ),
        ],
      ),
      Text(
        'Popularity: ${movie.popularity}',
        style: const TextStyle(color: Colors.white70, fontSize: 12),
        maxLines: 1,
        overflow: TextOverflow.ellipsis,
      ),
      Text(
        'Genre: ${movie.genreIds}',
        style: const TextStyle(color: Colors.white70, fontSize: 12),
        maxLines: 1,
        overflow: TextOverflow.ellipsis,
      ),
    ],
  );
}

// COMING SOON
Widget buildMovieGridComingSoon(Future<AutoGenerated> futureMovies) {
  return Padding(
    padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 20),
    child: FutureBuilder<AutoGenerated>(
      future: futureMovies,
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.waiting) {
          return const Center(
              child: CircularProgressIndicator(
                color: Colors.amber,
              )
          );
        } else if (snapshot.hasError) {
          return Center(
              child: Text('Error: ${snapshot.error}',
                  style: const TextStyle(color: Colors.white)));
        } else if (snapshot.hasData) {
          return GridView.builder(
            gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
              crossAxisCount: 2,
              mainAxisSpacing: 16.0,
              crossAxisSpacing: 16.0,
              childAspectRatio: 0.6,
            ),
            itemCount: snapshot.data!.results!.length,
            itemBuilder: (context, index) {
              Results movie = snapshot.data!.results![index];
              //return buildMovieGridItemComingSoon(movie);
              return GestureDetector(
                onTap: () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(
                      builder: (context) => DetailMoviePage(movie: movie),
                    ),
                  );
                },
                child: buildMovieGridItemComingSoon(movie),
              );
            },
          );
        } else {
          return const Center(
              child: Text(
                  'No data available',
                  style: TextStyle(color: Colors.white)
              )
          );
        }
      },
    ),
  );
}

Widget buildMovieGridItemComingSoon(Results movie) {
  return Column(
    crossAxisAlignment: CrossAxisAlignment.start,
    children: [
      Container(
        width: 191,
        height: 220,
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(12.0),
          image: DecorationImage(
            image: NetworkImage(
                'https://image.tmdb.org/t/p/w500${movie.posterPath}'
            ),
            fit: BoxFit.fill,
          ),
        ),
      ),
      const SizedBox(height: 8),
      Text(
        movie.title!,
        style: const TextStyle(
            color: Color(0xFFFCC434),
            fontSize: 16,
            fontWeight: FontWeight.bold),
        maxLines: 1,
        overflow: TextOverflow.ellipsis,
      ),
      const SizedBox(height: 4),
      Row(
        children: [
          const Icon(Icons.date_range, color: Colors.white, size: 14),
          const SizedBox(width: 4),
          Text(
            formatDate(movie.releaseDate),
            style: const TextStyle(color: Colors.white, fontSize: 12),
          ),
        ],
      ),
    ],
  );
}